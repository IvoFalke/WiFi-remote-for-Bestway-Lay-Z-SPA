# Home Assistant package file for https://github.com/visualapproach/WiFi-remote-for-Bestway-Lay-Z-SPA
# Save in packages directory in your Home Assistant configuration directory. Create it if it doesn't already exist.
# Add the following to configuration.yaml:
#homeassistant:
#  packages: !include_dir_named packages

# edited 20220710 to follow new HA requirements.
## Sensors ##
mqtt:

# Displays the current button being pushed on the control panel.
  sensor:
    - name: Spa Button
      unique_id: sensor.spa_button
      state_topic: "layzspa/button"
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
  
# Number of times MQTT has reconnected
    - name: Spa Connect Count
      unique_id: sensor.spa_connect_count
      state_topic: "layzspa/MQTT_Connect_Count"
  
# Spa temperature
    - name: Spa Temperature
      unique_id: sensor.spa_temperature
      state_topic: "layzspa/message"
      unit_of_measurement: '°C'
      value_template: "{{ value_json.TMP }}"
      expire_after: 700
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
  
# Spa target temperature
    - name: Spa Target Temperature
      unique_id: sensor.spa_target_temperature
      unit_of_measurement: '°C'
      state_topic: "layzspa/message"
      value_template: "{{ value_json.TGT }}"
      expire_after: 700
  
# Estimated time until target temperature is reached. Needs two+ temperature changes to make calculation
    - name: Spa Time to Target
      unique_id: sensor.spa_time_to_target
      icon: mdi:clock
      unit_of_measurement: 'hours'
      state_topic: "layzspa/times"
      value_template: "{{ (value_json.TTTT / 3600 | float) | round(2) }}"
      expire_after: 700
  
# Estimated spa energy usage
    - name: Spa Energy
      unique_id: sensor.spa_energy
      device_class: energy
      state_class: total_increasing
      unit_of_measurement: kWh
      icon: mdi:flash
      state_topic: "layzspa/times"
      value_template: "{{ value_json.KWH }}"
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      expire_after: 700
  
# Time when Chlorine last was added to water
    - name: Spa Cl Added
      unique_id: sensor.spa_cl_added
      unit_of_measurement: days
      icon: hass:hand-coin-outline
      state_topic: "layzspa/times"
      value_template: "{{ ( ( (now().timestamp()|int) - value_json.CLTIME|int)/3600/24) | round(2) }}"
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      expire_after: 700
  
# Time when filter last was changed
    - name: Spa Filter Changed
      unique_id: sensor.spa_filter_changed
      unit_of_measurement: days
      icon: hass:air-filter
      state_topic: "layzspa/times"
      value_template: "{{ ( ( (now().timestamp()|int) - value_json.FTIME|int)/3600/24) | round(2) }}"
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      expire_after: 700

## Only for use with the 4-wire models to track pump ERROR.
#  sensor:
#    - name: Spa Error
#      unique_id: sensor.spa_error
#      state_topic: "layzspa/message"
#      value_template: "{{ value_json.ERR }}"
#      expire_after: 700
#      availability_topic: "layzspa/Status"
#      payload_available: "Alive"
#      payload_not_available: "Dead"


## Binary sensors ##

# Status of keypad lock
  binary_sensor:
    - name: Spa Lock
      unique_id: binary_sensor.spa_lock
      state_topic: "layzspa/message"
      value_template: |- #"{{ value_json.LCK }}"
        {% if value_json.LCK == 1 %}
          ON
        {% else %}
          OFF
        {% endif %}
      expire_after: 700
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      device_class: lock
  
# Status of heater (heating/not heating)
    - name: Spa Heater Element
      unique_id: binary_sensor.spa_heater_element
      state_topic: "layzspa/message"
      value_template: |- #"{{ value_json.RED }}"
        {% if value_json.RED == 1 %}
          ON
        {% else %}
          OFF
        {% endif %}
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      expire_after: 700
      device_class: heat
  
# On when temperature has reached a certain threshold
    - name: Spa Ready
      unique_id: binary_sensor.spa_ready
      state_topic: "layzspa/message"
      value_template: |- #"{{ value_json.RED }}"
        {% if value_json.TMP > 30 %}
          {% if value_json.TMP >= value_json.TGT-1 %}
            ON
          {% else %}
            OFF
          {% endif %}
    
        {% else %}
          OFF
        {% endif %}
      icon: mdi:hot-tub
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
      expire_after: 700
    
# Spa connection
    - name: Spa Status
      unique_id: binary_sensor.spa_status
      device_class: connectivity
      state_topic: "layzspa/Status" 
      availability_topic: "layzspa/Status"
      payload_available: "Alive" 
      payload_not_available: "Dead"
      payload_on: "Alive" 
      payload_off: "Dead"

## 4 Wire Error State based on character display [E00]
#  sensor: 
#    - name: Spa Error
#      unique_id: binary_sensor.spa_error
#      device_class: problem
#      state_topic: "layzspa/message"
#      value_template: "{{ value_json.CH1 }}"
#      availability_topic: "layzspa/Status"
#      payload_available: "Alive" 
#      payload_not_available: "Dead"
#      payload_on: 69 
#      payload_off: 32


## Switches ##

# Switch for heater
  switch:
    - name: Spa Heat Regulation
      unique_id: switch.spa_heat_regulation
      command_topic: "layzspa/command"
      state_topic: "layzspa/message"
      value_template: |-
        {% if value_json.RED == 1 %}
          1
        {% elif value_json.GRN == 1 %}
          1
        {% else %}
          0
        {% endif %}
      icon: mdi:radiator
      state_on: 1
      state_off: 0
      payload_on: '{CMD:3,VALUE:true,XTIME:0,INTERVAL:0}'
      payload_off: '{CMD:3,VALUE:false,XTIME:0,INTERVAL:0}'
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
  
# Switch for bubbles
    - name: Spa Airbubbles
      unique_id: switch.spa_airbubbles
      command_topic: "layzspa/command"
      state_topic: "layzspa/message"
      value_template: "{{ value_json.AIR }}"
      icon: mdi:chart-bubble
      payload_on: '{CMD:2,VALUE:true,XTIME:0,INTERVAL:0}'
      payload_off: '{CMD:2,VALUE:false,XTIME:0,INTERVAL:0}'
      state_on: 1
      state_off: 0
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"

# Switch for pump
    - name: Spa Pump
      unique_id: switch.spa_pump
      command_topic: "layzspa/command"
      state_topic: "layzspa/message"
      value_template: "{{ value_json.FLT }}"
      icon: mdi:pump
      payload_on: '{CMD:4,VALUE:true,XTIME:0,INTERVAL:0}'
      payload_off: '{CMD:4,VALUE:false,XTIME:0,INTERVAL:0}'
      state_on: 1
      state_off: 0
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
  
# Switch for changing temperature unit
    - name: Spa Temperature Unit
      unique_id: switch.spa_temperature_unit
      command_topic: "layzspa/command"
      state_topic: "layzspa/message"
      value_template: "{{ value_json.UNT }}"
      icon: mdi:temperature-celsius
      payload_on: '{CMD:1,VALUE:true,XTIME:0,INTERVAL:0}'
      payload_off: '{CMD:1,VALUE:false,XTIME:0,INTERVAL:0}'
      state_on: 1
      state_off: 0
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"


## Buttons ##

# Command to reset chlorine timer
  button:
    - name: Spa Reset Cl Timer
      unique_id: button.spa_reset_cl_timer
      command_topic: "layzspa/command"
      icon: mdi:restart
      payload_press: '{CMD:9,VALUE:true,XTIME:0,INTERVAL:0}'
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
  
# Command to reset filter timer
    - name: Spa Reset Filter Timer
      unique_id: button.spa_reset_filter_timer
      command_topic: "layzspa/command"
      icon: mdi:restart
      payload_press: '{CMD:10,VALUE:true,XTIME:0,INTERVAL:0}'
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"

# Command to restart ESP
    - name: Spa Restart ESP
      unique_id: button.spa_restart_esp
      device_class: restart
      command_topic: "layzspa/command"
      icon: mdi:restart
      payload_press: '{CMD:6,VALUE:true,XTIME:0,INTERVAL:0}'
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"


## Climate control ##
  climate:
    - name: Spa
      unique_id: climate.spa
      max_temp: 40
      min_temp: 20
      precision: 1.0
      temperature_unit: "C"
      modes:
        - "off"
        - "heat"
      mode_state_topic: "layzspa/message"
      mode_state_template: >-
        {% if value_json.RED == 1 %}
          heat
        {% elif value_json.GRN == 1 %}
          heat
        {% else %}
          off
        {% endif %}  
      action_topic: "layzspa/message"
      action_template: >-
        {% if value_json.RED == 1 %}
          heating
        {% elif value_json.GRN == 1 %}
          idle
        {% else %}
          off
        {% endif %}          
      temperature_state_topic: "layzspa/message"
      temperature_state_template: "{{ value_json.TGT }}"
      current_temperature_topic: "layzspa/message"
      current_temperature_template: "{{ value_json.TMP }}"
      temperature_command_topic : "layzspa/command"
      temperature_command_template: '{"CMD":0,"VALUE":{{ value|int }},"XTIME":0,"INTERVAL":0}'
      power_command_topic: "layzspa/command"
      payload_on: '{"CMD":3,"VALUE":1,"XTIME":0,"INTERVAL":0}'
      payload_off: '{"CMD":3,"VALUE":0,"XTIME":0,"INTERVAL":0}'
      availability_topic: "layzspa/Status"
      payload_available: "Alive"
      payload_not_available: "Dead"
